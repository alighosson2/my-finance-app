### ===== BUDGET ENDPOINTS TESTING =====
### Test all budget functionality endpoints

@baseUrl = http://localhost:3000/api
@authToken = {{your_jwt_token_here}}

### STEP 1: Login to get JWT token (if needed)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "yourpassword"
}

### STEP 2: Get Budget Categories (Available Options)
GET {{baseUrl}}/budgets/categories
Authorization: Bearer {{authToken}}

### STEP 3: Create Monthly Grocery Budget
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Monthly Groceries",
  "category": "groceries",
  "amount": 800,
  "period": "monthly",
  "start_date": "2024-01-01T00:00:00Z"
}

### STEP 4: Create Dining Out Budget
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Dining & Restaurants",
  "category": "dining",
  "amount": 300,
  "period": "monthly",
  "start_date": "2024-01-01T00:00:00Z",
  "end_date": "2024-12-31T23:59:59Z"
}

### STEP 5: Create Weekly Entertainment Budget
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Weekend Entertainment",
  "category": "entertainment",
  "amount": 150,
  "period": "weekly",
  "start_date": "2024-01-01T00:00:00Z"
}

### STEP 6: Get All Budgets (with summary)
GET {{baseUrl}}/budgets
Authorization: Bearer {{authToken}}

### STEP 7: Get Active Budgets Only
GET {{baseUrl}}/budgets/active
Authorization: Bearer {{authToken}}

### STEP 8: Get Budget Summary/Dashboard
GET {{baseUrl}}/budgets/summary
Authorization: Bearer {{authToken}}

### STEP 9: Get Specific Budget by ID (replace 1 with actual ID)
GET {{baseUrl}}/budgets/1
Authorization: Bearer {{authToken}}

### STEP 10: Get Budget Spending Analysis
GET {{baseUrl}}/budgets/1/spending
Authorization: Bearer {{authToken}}

### STEP 11: Update Budget (increase grocery budget)
PUT {{baseUrl}}/budgets/1
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Monthly Groceries - Updated",
  "amount": 900,
  "category": "groceries"
}

### STEP 12: Get Spending by Category
GET {{baseUrl}}/budgets/spending/categories?start_date=2024-01-01&end_date=2024-01-31
Authorization: Bearer {{authToken}}

### STEP 13: Auto-Assign Transactions to Budgets
POST {{baseUrl}}/budgets/auto-assign
Authorization: Bearer {{authToken}}

### STEP 14: Get Budget Alerts
GET {{baseUrl}}/budgets/alerts
Authorization: Bearer {{authToken}}

### STEP 15: Get Budget Recommendations
GET {{baseUrl}}/budgets/recommendations
Authorization: Bearer {{authToken}}

### STEP 16: Filter Budgets by Category
GET {{baseUrl}}/budgets?category=groceries&is_active=true
Authorization: Bearer {{authToken}}

### STEP 17: Filter Budgets by Amount Range
GET {{baseUrl}}/budgets?amount_min=200&amount_max=1000
Authorization: Bearer {{authToken}}

### STEP 18: Get Budgets with Pagination
GET {{baseUrl}}/budgets?page=1&limit=5
Authorization: Bearer {{authToken}}

### STEP 19: Deactivate Budget (soft delete)
POST {{baseUrl}}/budgets/2/deactivate
Authorization: Bearer {{authToken}}

### STEP 20: Delete Budget (hard delete)
DELETE {{baseUrl}}/budgets/3
Authorization: Bearer {{authToken}}

### ===== ADVANCED BUDGET SCENARIOS =====

### Create Yearly Savings Budget
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Emergency Fund",
  "category": "savings",
  "amount": 12000,
  "period": "yearly",
  "start_date": "2024-01-01T00:00:00Z",
  "end_date": "2024-12-31T23:59:59Z"
}

### Create Quarterly Travel Budget
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Travel & Vacation",
  "category": "travel",
  "amount": 2500,
  "period": "quarterly",
  "start_date": "2024-01-01T00:00:00Z"
}

### Test Different Categories
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Healthcare Expenses",
  "category": "healthcare",
  "amount": 400,
  "period": "monthly",
  "start_date": "2024-01-01T00:00:00Z"
}

### ===== ERROR TESTING =====

### Test Invalid Category
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Invalid Budget",
  "category": "invalid_category",
  "amount": 500,
  "period": "monthly",
  "start_date": "2024-01-01T00:00:00Z"
}

### Test Invalid Period
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Invalid Period Budget",
  "category": "groceries",
  "amount": 500,
  "period": "invalid_period",
  "start_date": "2024-01-01T00:00:00Z"
}

### Test Negative Amount
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Negative Budget",
  "category": "groceries",
  "amount": -500,
  "period": "monthly",
  "start_date": "2024-01-01T00:00:00Z"
}

### Test Missing Required Fields
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Incomplete Budget",
  "amount": 500
}

### Test Duplicate Budget Name
POST {{baseUrl}}/budgets
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Monthly Groceries",
  "category": "groceries",
  "amount": 600,
  "period": "monthly",
  "start_date": "2024-01-01T00:00:00Z"
}

### Test Unauthorized Access (no token)
GET {{baseUrl}}/budgets

### Test Non-existent Budget
GET {{baseUrl}}/budgets/999
Authorization: Bearer {{authToken}}

### ===== EXPECTED RESPONSES =====

/*
STEP 3 Response (Create Budget):
{
  "message": "Budget created successfully",
  "data": {
    "id": 1,
    "user_id": 1,
    "name": "Monthly Groceries",
    "category": "groceries",
    "amount": 800.0,
    "period": "monthly",
    "start_date": "2024-01-01T00:00:00Z",
    "end_date": "2024-02-01T00:00:00Z",
    "is_active": true,
    "is_currently_active": true,
    "days_remaining": 25,
    "period_end_date": "2024-02-01T00:00:00Z",
    "created_at": "2024-01-15T10:30:00Z",
    "updated_at": "2024-01-15T10:30:00Z"
  }
}

STEP 6 Response (Get All Budgets):
{
  "message": "Budgets retrieved successfully",
  "data": [
    {
      "id": 1,
      "name": "Monthly Groceries",
      "category": "groceries",
      "amount": 800.0,
      "period": "monthly",
      "is_currently_active": true,
      "days_remaining": 25
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 3,
    "totalPages": 1
  },
  "summary": {
    "totalBudgets": 3,
    "activeBudgets": 3,
    "totalBudgetAmount": 1250.0,
    "totalSpentAmount": 450.0,
    "totalRemainingAmount": 800.0,
    "budgetsOnTrack": 2,
    "budgetsExceeded": 1,
    "averageSpendingRate": 36.0
  }
}

STEP 10 Response (Budget Spending):
{
  "message": "Budget spending retrieved successfully",
  "data": {
    "budgetId": 1,
    "budgetName": "Monthly Groceries",
    "category": "groceries",
    "budgetAmount": 800,
    "spentAmount": 245.50,
    "remainingAmount": 554.50,
    "percentageUsed": 30.7,
    "status": "active",
    "daysRemaining": 18,
    "averageDailySpending": 18.96,
    "projectedSpending": 587.32,
    "transactions": [
      {
        "id": 123,
        "amount": 89.50,
        "description": "Whole Foods Market",
        "transaction_date": "2024-01-14T10:30:00Z",
        "category": "groceries",
        "merchant_name": "Whole Foods"
      }
    ]
  }
}

STEP 14 Response (Budget Alerts):
{
  "message": "Budget alerts retrieved successfully",
  "data": [
    {
      "budgetId": 2,
      "budgetName": "Dining & Restaurants",
      "alertType": "exceeded",
      "message": "Budget exceeded! You've spent 105.2% of your Dining & Restaurants budget.",
      "percentageUsed": 105.2,
      "recommendedAction": "Consider reducing spending in this category or adjusting your budget."
    },
    {
      "budgetId": 1,
      "budgetName": "Monthly Groceries",
      "alertType": "warning",
      "message": "Warning: You've used 85.1% of your Monthly Groceries budget.",
      "percentageUsed": 85.1,
      "recommendedAction": "Monitor spending closely to stay within budget."
    }
  ],
  "count": 2
}
*/ 