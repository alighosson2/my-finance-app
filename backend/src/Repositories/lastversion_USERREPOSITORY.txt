//User Repository 
// UserRepository.ts
import { PrismaClient, users, user_role } from '@prisma/client';
import { ConnectionManager } from './ConnectionManager';
import { initializableRepository, id } from './IRepository';
import logger from '../util/logger';
import { UserEntity, UserRole } from '../model/Usermodel';

// ðŸ‘‡ Helper function to map Prisma result to UserEntity
function toUserEntity(user: users): UserEntity {
  return new UserEntity(
    user.id,
    user.name,
    user.email,
    user.password_hash,
    user.role as UserRole,
    user.profile_settings ?? {},
    user.date_joined ?? new Date(),
    user.is_active ?? true,
    user.created_at ?? new Date(),
    user.updated_at ?? new Date()
  );
}

export class UserRepository implements initializableRepository<users> {
  private prisma: PrismaClient | null = null;

  async init(): Promise<void> {
    this.prisma = await ConnectionManager.getConnection();
  }

  private ensureConnected(): void {
    if (!this.prisma) throw new Error('Database not initialized');
  }

  private parseId(id: id): number {
    if (id <= 0) {
      throw new Error('Invalid user ID');
    }
    return id;
  }

  async create(user: users): Promise<users> {
    this.ensureConnected();

    const existing = await this.prisma!.users.findUnique({
      where: { email: user.email }
    });

    if (existing) {
      throw new Error('User with this email already exists');
    }

    const { id, created_at, updated_at, date_joined, ...userData } = user;

    return this.prisma!.users.create({
      data: {
        ...userData,
        profile_settings: userData.profile_settings ?? {},
        is_active: userData.is_active ?? true,
        role: userData.role ?? user_role.user,
      },
    });
  }


  async update(id: id, user: UserEntity): Promise<UserEntity | null> {
    this.ensureConnected();

    // Validate ID before proceeding
    if (id <= 0) {
      throw new Error('Invalid user ID');
    }

    try {
      // Check if the user exists before proceeding with the update
      const existing = await this.prisma!.users.findUnique({
        where: { id },
      });

      // If the user does not exist, throw an error
      if (!existing) {
        throw new Error('User not found');
      }

      // Proceed with the update if the user exists
      const updated = await this.prisma!.users.update({
        where: { id },
        data: {
          name: user.name,
          email: user.email,
          password_hash: user.password_hash,
          profile_settings: user.profile_settings ?? {},
          is_active: user.is_active,
          role: user.role,
          updated_at: new Date(),
        },
      });

      return toUserEntity(updated);

    } catch (error) {
      // Handle user not found error
      if ((error as Error).message === 'User not found') {
        throw error;
      }

      // Handle any other errors that occur during the update
      throw new Error(`Failed to update user: ${(error as Error).message}`);
    }
  }



  async get(id: id): Promise<UserEntity> {
    this.ensureConnected();

    // Validate ID before proceeding

    if (id <= 0) {
      throw new Error('Invalid user ID');
    }

    try {
      // Query user from the database
      const user = await this.prisma!.users.findUnique({
        where: { id },
      });

      // If the user is not found, throw an error
      if (!user) {
        throw new Error('User not found');
      }

      // Return mapped UserEntity
      return toUserEntity(user);
    } catch (error) {
      // Check if the error is "User not found" and throw it
      if ((error as Error).message === 'User not found') {
        throw error;
      }

      // For other errors, re-throw with additional message
      throw new Error(`Failed to get user: ${(error as Error).message}`);
    }
  }

  /*async getByEmail(email: string): Promise<UserEntity> {
    this.ensureConnected();

    // Validate email before proceeding
    if (!email || !email.includes('@')) {
      throw new Error('Invalid email address');
    }

    try {
      // Query user from the database
      const user = await this.prisma!.users.findUnique({
        where: { email },
      });

      // If the user is not found, throw an error
      if (!user) {
        throw new Error('User not found');
      }

      // Return mapped UserEntity
      return toUserEntity(user);
    } catch (error) {
      // Check if the error is "User not found" and throw it
      if ((error as Error).message === 'User not found') {
        throw error;
      }

      // For other errors, re-throw with additional message
      throw new Error(`Failed to get user by email: ${(error as Error).message}`);
    }
  }*/






  async getAll(): Promise<users[]> {
    this.ensureConnected();
    return this.prisma!.users.findMany();
  }

  async delete(id: id): Promise<void> {
    this.ensureConnected();

    // Validate ID before proceeding
    if (id <= 0) {
      throw new Error('Invalid user ID');
    }

    try {
      // Try to delete the user from the database
      const user = await this.prisma!.users.findUnique({
        where: { id },
      });

      // If user not found, throw an error (similar to get method)
      if (!user) {
        throw new Error('User not found');
      }

      // Proceed with deletion after confirming user exists
      await this.prisma!.users.delete({
        where: { id },
      });

    } catch (error) {
      // Handle the error if user not found
      if ((error as Error).message === 'User not found') {
        throw error;
      }

      // For any other errors, re-throw with additional message
      throw new Error(`Failed to delete user: ${(error as Error).message}`);
    }
  }


}



export async function createUserRepository(): Promise<UserRepository> {
  const repo = new UserRepository();
  await repo.init();
  return repo;
}



