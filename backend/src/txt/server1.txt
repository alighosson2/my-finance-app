import express, { Request, Response } from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import cookieParser from 'cookie-parser';
import dashboardRoutes from './dashboard';
import authRoutes from './auth';
import { PrismaClient } from '@prisma/client';
import { authenticateToken, AuthRequest } from './authMiddleware';

dotenv.config();
const app = express();
const prisma = new PrismaClient();

const rootPath = path.resolve(__dirname, '..');
const frontendPath = path.join(rootPath, 'frontend');

app.use(cors({ credentials: true, origin: true }));
app.use(cookieParser());
app.use(express.json());
app.use(express.static(frontendPath));

// Public routes (HTML files served directly)
app.get('/signup', (req, res) => res.sendFile(path.join(frontendPath, 'signup.html')));
app.get('/login', (req, res) => res.sendFile(path.join(frontendPath, 'login.html')));

// Protected route: Dashboard page
app.get('/api/dashboard', authenticateToken, async (req: AuthRequest, res: Response) => {
  const userId = (req.user as any).userId;

  try {
    // Fetch user details (e.g., name) from the database
    const user = await prisma.users.findUnique({
      where: { id: userId },
    });

    // Fetch transactions for the user
    const transactions = await prisma.transactions.findMany({
      where: { user_id: userId },
      orderBy: { transaction_date: 'desc' },
    });

    // Calculate income and expenses
    const income = transactions
      .filter((t) => t.transaction_type === 'INCOME')
      .reduce((sum, t) => sum + parseFloat(t.amount.toString()), 0);

    const expenses = transactions
      .filter((t) => t.transaction_type === 'EXPENSE')
      .reduce((sum, t) => sum + parseFloat(t.amount.toString()), 0);

    // Send the response with user name and financial data
    res.json({
      user: user?.name, // Send the user's name
      income,
      expenses,
      balance: income - expenses,
      recentTransactions: transactions.slice(0, 5),
    });
  } catch (err) {
    console.error('Dashboard error:', err);
    res.status(500).json({ error: 'Something went wrong' });
  }
});

// Auth and API routes
app.use('/api', authRoutes);
app.use('/api', dashboardRoutes); // All /api/dashboard/* goes here

// Example protected API route
app.get('/api/users', authenticateToken, async (req, res) => {
  const users = await prisma.users.findMany();
  res.json(users);
});

// Root API test
app.get('/', (req, res) => {
  res.send('Welcome to MyFinance360 API');
});

// Start server at the end
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server up on port ${PORT}`));




